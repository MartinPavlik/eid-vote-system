{"ast":null,"code":"import _regeneratorRuntime from \"/home/roman/testws/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as eccrypto from 'eccrypto'; // todo\n\nvar webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg'; // automatical request\n\nvar responseObject = {\n  cmd: 'handshake',\n  msg: {\n    birthNumber: '120493904239048',\n    documentNumber: '271498327498',\n    publicKey: '23oiroi2joi23jrio23j'\n  },\n  signature: '99r8329r8j2398fj93f2j983f2j'\n};\n\nvar WebID =\n/*#__PURE__*/\nfunction () {\n  function WebID() {\n    _classCallCheck(this, WebID);\n\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeCmd = false;\n    this.handshakeCallback = null;\n    this.handshakeData = null;\n    this.dataCmd = null;\n    this.message = null;\n    this.signature = null;\n  }\n\n  _createClass(WebID, [{\n    key: \"login\",\n    value: function login(cb) {\n      if (this.webSocket.readyState === 1) {\n        console.log('try to handshake');\n        this.handshakeCmd = true;\n        this.webSocket.send(JSON.stringify({\n          cmd: 'handshake',\n          msg: {}\n        }));\n        this.handshakeCallback = cb;\n      } else {\n        console.log('connection error');\n        cb({\n          msg: 'connection error',\n          readyState: this.webSocket.readyState\n        }, null, null);\n      }\n    }\n  }, {\n    key: \"handshake\",\n    value: function () {\n      var _handshake = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(message, signature) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.handshakeCmd) {\n                  this.validateMessage(message, signature).then(function () {\n                    return _this.handshakeCallback(null, message, signature);\n                  }).catch(function (err) {\n                    console.log(err);\n                  });\n                } else {\n                  this.validateMessage(message, signature).then(function () {\n                    _this.handshakeData = {\n                      message: message,\n                      signature: signature\n                    };\n                  }).catch(function (err) {\n                    console.log(err);\n                  });\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handshake(_x, _x2) {\n        return _handshake.apply(this, arguments);\n      }\n\n      return handshake;\n    }()\n  }, {\n    key: \"getData\",\n    value: function getData(messaage, signature) {// todo\n    }\n  }, {\n    key: \"listenToStatusChange\",\n    value: function listenToStatusChange(cb) {\n      var _this2 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = _this2.parseEventData(event);\n\n        if (data.cmd === 'card-present-status') {\n          cb(data.msg);\n        }\n      };\n    }\n  }, {\n    key: \"parseEventData\",\n    value: function parseEventData(event) {\n      var data = JSON.parse(event.data);\n      console.log(data);\n      return data;\n    }\n  }, {\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this3 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = JSON.parse(event.data);\n        console.log(data);\n\n        switch (data.cmd) {\n          case 'handshake':\n            _this3.handshake(data.msg, data.signature);\n\n            break;\n\n          case 'data':\n            _this3.getData(data.msg, data.signature);\n\n            break;\n\n          case 'card-present-status':\n            // this.changeStatus(data.msg);\n            break;\n\n          default:\n            console.log('unknown cmd');\n        }\n      };\n    }\n  }, {\n    key: \"validateMessage\",\n    value: function validateMessage(message, signature) {\n      return new Promise(function (resolve, reject) {\n        var publicKey = message.publicKey;\n        var signedMessage = JSON.stringify(message);\n        var bufferedMessage = Buffer.from(signedMessage, 'utf8');\n        eccrypto.verify(publicKey, bufferedMessage, signature).then(function () {\n          return resolve(true);\n        }).catch(function () {\n          return reject(false);\n        });\n      });\n    }\n  }]);\n\n  return WebID;\n}();\n\nexport default WebID;\n/*\nasync function login() {\n  try {\n    const data = await fetch(`${baseUrl}/login`);\n    await eccrypto.verify(data.publicKey, data.message, data.signature);\n    return Promise.resolve(data.message);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nfunction data() {\n  fetch(`${baseUrl}/data`).then((data) => {\n    eccrypto\n    console.log(data);\n  }).catch((err) => {\n    console.log(err);\n  });\n}\n\nlogin();\n\n*/","map":{"version":3,"sources":["/home/roman/testws/src/components/webId.js"],"names":["eccrypto","webSocketUrl","responseObject","cmd","msg","birthNumber","documentNumber","publicKey","signature","WebID","webSocket","WebSocket","setListeners","handshakeCmd","handshakeCallback","handshakeData","dataCmd","message","cb","readyState","console","log","send","JSON","stringify","validateMessage","then","catch","err","messaage","onmessage","event","data","parseEventData","parse","handshake","getData","Promise","resolve","reject","signedMessage","bufferedMessage","Buffer","from","verify"],"mappings":"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","sourcesContent":["import * as eccrypto from 'eccrypto'; // todo\nconst webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg';\n\n// automatical request\nconst responseObject = {\n  cmd: 'handshake',\n  msg: {\n    birthNumber: '120493904239048',\n    documentNumber: '271498327498',\n    publicKey: '23oiroi2joi23jrio23j'\n  },\n  signature: '99r8329r8j2398fj93f2j983f2j'\n}\n\nclass WebID {\n\n  webSocket;\n  handshakeCmd;\n  handshakeCallback;\n  handshakeData;\n  message;\n  signature;\n  dataCmd;\n\n  constructor() {\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeCmd = false;\n    this.handshakeCallback = null;\n    this.handshakeData = null;\n    this.dataCmd = null;\n    this.message = null;\n    this.signature = null;\n  }\n\n  login(cb) {\n    if (this.webSocket.readyState === 1) {\n      console.log('try to handshake');\n      this.handshakeCmd = true;\n      this.webSocket.send(JSON.stringify({ cmd: 'handshake', msg: {} }));\n      this.handshakeCallback = cb;\n    } else {\n      console.log('connection error');\n      cb({ msg: 'connection error', readyState: this.webSocket.readyState }, null, null);\n    }\n  }\n\n  async handshake(message, signature) {\n    if (this.handshakeCmd) {\n      this.validateMessage(message, signature)\n        .then(() => this.handshakeCallback(null, message, signature))\n        .catch((err) => { console.log(err); });\n    } else {\n      this.validateMessage(message, signature)\n        .then(() => { this.handshakeData = { message, signature }; })\n        .catch((err) => { console.log(err); });\n    }\n  }\n\n  getData(messaage, signature) {\n    // todo\n  }\n\n  listenToStatusChange(cb){\n    this.webSocket.onmessage = (event) => {\n      const data = this.parseEventData(event);\n      if(data.cmd === 'card-present-status') {\n        cb(data.msg);\n      }\n    }\n  }\n\n  parseEventData(event) {\n    const data = JSON.parse(event.data);\n    console.log(data);\n    return data;\n  }\n\n  setListeners() {\n    this.webSocket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      console.log(data);\n      switch (data.cmd) {\n        case 'handshake':\n          this.handshake(data.msg, data.signature);\n          break;\n        case 'data':\n          this.getData(data.msg, data.signature);\n          break;\n        case 'card-present-status':\n          // this.changeStatus(data.msg);\n          break;\n        default:\n          console.log('unknown cmd');\n      }\n    }\n  }\n\n  validateMessage(message, signature) {\n    return new Promise((resolve, reject) => {\n      const publicKey = message.publicKey;\n      const signedMessage = JSON.stringify(message);\n      const bufferedMessage = Buffer.from(signedMessage, 'utf8');\n      eccrypto.verify(publicKey, bufferedMessage, signature).then(() => {\n        return resolve(true);\n      }).catch(() => {\n        return reject(false);\n      });\n    })\n  }\n\n}\n\nexport default WebID;\n\n/*\nasync function login() {\n  try {\n    const data = await fetch(`${baseUrl}/login`);\n    await eccrypto.verify(data.publicKey, data.message, data.signature);\n    return Promise.resolve(data.message);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nfunction data() {\n  fetch(`${baseUrl}/data`).then((data) => {\n    eccrypto\n    console.log(data);\n  }).catch((err) => {\n    console.log(err);\n  });\n}\n\nlogin();\n\n*/"]},"metadata":{},"sourceType":"module"}