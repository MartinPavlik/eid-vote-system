{"ast":null,"code":"import _classCallCheck from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as ecCrypto from 'eccrypto';\nvar webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg';\n\nvar WebID =\n/*#__PURE__*/\nfunction () {\n  function WebID() {\n    _classCallCheck(this, WebID);\n\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeData = null;\n    this.message = null;\n    this.signature = null;\n    this.handshakeCallback = null;\n  }\n\n  _createClass(WebID, [{\n    key: \"login\",\n    value: function login(cb) {\n      if (this.webSocket.readyState === 1) {\n        console.log('try to login');\n        this.handshakeCmd = true;\n        this.webSocket.send(JSON.stringify({\n          cmd: 'handshake',\n          msg: {}\n        }));\n        this.handshakeCallback = cb;\n      } else {\n        console.log('connection error');\n        cb({\n          msg: 'connection error',\n          readyState: this.webSocket.readyState\n        }, null, null);\n      }\n    }\n  }, {\n    key: \"handshake\",\n    value: function handshake(message, signature) {\n      var _this = this;\n\n      this.validateHandshake(message, signature).then(function () {\n        console.log('ahoj');\n\n        _this.handshakeCallback(null, message, signature);\n      }).catch(function (err) {\n        console.log('cus');\n\n        _this.handshakeCallback(err, null, null);\n      });\n    }\n  }, {\n    key: \"listenToStatusChange\",\n    value: function listenToStatusChange(cb) {\n      var _this2 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = _this2.parseEventData(event);\n\n        if (data.cmd === 'card-present-status') {\n          cb(data.msg);\n        }\n      };\n\n      this.webSocket.onclose = function (event) {\n        console.log(event);\n        setTimeout(function () {\n          _this2.webSocket = new WebSocket(webSocketUrl);\n        }, 5000);\n      };\n    }\n  }, {\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this3 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = _this3.parseEventData(event);\n\n        switch (data.cmd) {\n          case 'handshake':\n            console.log('handshake');\n\n            _this3.handshake(data.msg, data.signature);\n\n            break;\n\n          case 'data':\n            // todo\n            _this3.getData(data.msg, data.signature);\n\n            break;\n\n          case 'card-present-status':\n            // implemented in other listener\n            break;\n\n          default:\n            console.log('unknown cmd');\n        }\n      };\n    }\n  }, {\n    key: \"parseEventData\",\n    value: function parseEventData(event) {\n      var data = JSON.parse(event.data);\n      console.log(data);\n      return data;\n    }\n  }, {\n    key: \"validateHandshake\",\n    value: function validateHandshake(message, signature) {\n      return new Promise(function (resolve, reject) {\n        var publicKey = message.publicKey;\n        var signedMessage = JSON.stringify(message);\n        var bufferedMessage = Buffer.from(signedMessage, 'utf8');\n        ecCrypto.verify(publicKey, bufferedMessage, signature).then(function () {\n          return resolve(true);\n        }).catch(function () {\n          return reject(false);\n        });\n      });\n    }\n  }]);\n\n  return WebID;\n}();\n\nexport default WebID;","map":{"version":3,"sources":["/home/roman/testws/src/components/webId.js"],"names":["ecCrypto","webSocketUrl","WebID","webSocket","WebSocket","setListeners","handshakeData","message","signature","handshakeCallback","cb","readyState","console","log","handshakeCmd","send","JSON","stringify","cmd","msg","validateHandshake","then","catch","err","onmessage","event","data","parseEventData","onclose","setTimeout","handshake","getData","parse","Promise","resolve","reject","publicKey","signedMessage","bufferedMessage","Buffer","from","verify"],"mappings":"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","sourcesContent":["import * as ecCrypto from 'eccrypto';\nconst webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg';\n\nclass WebID {\n\n  constructor() {\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeData = null;\n    this.message = null;\n    this.signature = null;\n    this.handshakeCallback = null;\n  }\n\n  login(cb) {\n    if (this.webSocket.readyState === 1) {\n      console.log('try to login');\n      this.handshakeCmd = true;\n      this.webSocket.send(JSON.stringify({ cmd: 'handshake', msg: {} }));\n      this.handshakeCallback = cb;\n    } else {\n      console.log('connection error');\n      cb({ msg: 'connection error', readyState: this.webSocket.readyState }, null, null);\n    }\n  }\n\n  handshake(message, signature) {\n    this.validateHandshake(message, signature)\n        .then(() => { console.log('ahoj'); this.handshakeCallback(null, message, signature); })\n        .catch((err) => { console.log('cus'); this.handshakeCallback(err, null, null); });\n  }\n\n  listenToStatusChange(cb) {\n    this.webSocket.onmessage = (event) => {\n      const data = this.parseEventData(event);\n      if(data.cmd === 'card-present-status') {\n        cb(data.msg);\n      }\n    }\n    this.webSocket.onclose = (event) => {\n      console.log(event);\n      setTimeout(() => {\n        this.webSocket = new WebSocket(webSocketUrl);\n      }, 5000);\n    };\n  }\n\n  setListeners() {\n    this.webSocket.onmessage = (event) => {\n      const data = this.parseEventData(event);\n      switch (data.cmd) {\n        case 'handshake':\n        console.log('handshake')\n          this.handshake(data.msg, data.signature);\n          break;\n        case 'data':\n          // todo\n          this.getData(data.msg, data.signature);\n          break;\n        case 'card-present-status':\n          // implemented in other listener\n          break;\n        default:\n          console.log('unknown cmd');\n      }\n    }\n  }\n\n  parseEventData(event) {\n    const data = JSON.parse(event.data);\n    console.log(data);\n    return data;\n  }\n\n  validateHandshake(message, signature) {\n    return new Promise((resolve, reject) => {\n      const publicKey = message.publicKey;\n      const signedMessage = JSON.stringify(message);\n      const bufferedMessage = Buffer.from(signedMessage, 'utf8');\n      ecCrypto.verify(publicKey, bufferedMessage, signature)\n        .then(() => resolve(true) )\n        .catch(() => reject(false) );\n    });\n  }\n\n}\n\nexport default WebID;"]},"metadata":{},"sourceType":"module"}