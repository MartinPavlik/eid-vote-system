{"ast":null,"code":"import _objectSpread from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as ecCrypto from 'eccrypto';\nvar webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg';\n\nvar WebID =\n/*#__PURE__*/\nfunction () {\n  function WebID() {\n    _classCallCheck(this, WebID);\n\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeData = null;\n    this.message = null;\n    this.signature = null;\n    this.handshakeCallback = null;\n    this.getDataCallback = null;\n    this.statusChangeCallback = null;\n  }\n\n  _createClass(WebID, [{\n    key: \"login\",\n    value: function login(cb) {\n      if (this.webSocket.readyState === 1) {\n        console.log('try to login');\n        var wsMessage = {\n          cmd: 'handshake',\n          msg: {}\n        };\n        this.webSocket.send(JSON.stringify(_objectSpread({}, wsMessage)));\n        this.handshakeCallback = cb;\n      } else {\n        console.log('connection error');\n        cb({\n          msg: 'connection error',\n          readyState: this.webSocket.readyState\n        }, null, null);\n      }\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"cardID\", \"dokState\", \"DokTryLimit\", \"DokMaxTryLimit\", \"iokState\", \"IokMaxTryLimit\", \"IokTryLimit\", \"serialNumber\", \"documentNumber\", \"CN\", \"surName\", \"givenName\", \"street\", \"locality\", \"state\", \"country\", \"testWhichIsNotImplemented\"];\n      var cb = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (this.webSocket.readyState === 1) {\n        console.log('try to get data');\n        var wsMessage = {\n          cmd: 'get-date',\n          msg: data\n        };\n        this.webSocket.send(JSON.stringify(_objectSpread({}, wsMessage)));\n        this.getDataCallback = cb;\n      } else {\n        console.log('connection error');\n        cb({\n          msg: 'connection error',\n          readyState: this.webSocket.readyState\n        }, null, null);\n      }\n    }\n  }, {\n    key: \"handshake\",\n    value: function handshake(message, signature) {\n      var _this = this;\n\n      this.validateMessage(message, signature).then(function () {\n        return _this.handshakeCallback && _this.handshakeCallback(null, message, signature);\n      }).catch(function (err) {\n        return _this.handshakeCallback && _this.handshakeCallback(err, null, null);\n      });\n    }\n  }, {\n    key: \"data\",\n    value: function data(message, signature) {\n      var _this2 = this;\n\n      this.validateMessage(message, signature).then(function () {\n        return _this2.getDataCallback && _this2.getDataCallback(null, message, signature);\n      }).catch(function (err) {\n        return _this2.getDataCallback && _this2.getDataCallback(err, null, null);\n      });\n    }\n  }, {\n    key: \"listenToStatusChange\",\n    value: function listenToStatusChange(cb) {\n      this.statusChangeCallback = cb;\n    }\n  }, {\n    key: \"parseEventData\",\n    value: function parseEventData(event) {\n      var data = JSON.parse(event.data);\n      return data;\n    }\n  }, {\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this3 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = _this3.parseEventData(event);\n\n        console.log(data);\n\n        switch (data.cmd) {\n          case 'handshake':\n            _this3.handshake(data.msg, data.signature);\n\n            break;\n\n          case 'data':\n            // todo\n            _this3.data(data.msg, data.signature);\n\n            break;\n\n          case 'card-present-status':\n            _this3.statusChangeCallback && _this3.statusChangeCallback(data.msg);\n            break;\n\n          default:\n            console.log('unknown cmd');\n        }\n      };\n\n      this.webSocket.onclose = function (event) {\n        console.log(event);\n        setTimeout(function () {\n          _this3.webSocket = new WebSocket(webSocketUrl);\n        }, 5000);\n      };\n    }\n  }, {\n    key: \"validateMessage\",\n    value: function validateMessage(message, signature) {\n      return new Promise(function (resolve, reject) {\n        console.log('validation');\n        var publicKey = message.publicKey;\n        var signedMessage = JSON.stringify(message);\n        var bufferedMessage = Buffer.from(signedMessage, 'utf8');\n        ecCrypto.verify(publicKey, bufferedMessage, signature).then(function () {\n          return resolve(true);\n        }).catch(function () {\n          return reject(false);\n        });\n      });\n    }\n  }]);\n\n  return WebID;\n}();\n\nexport default WebID;","map":{"version":3,"sources":["/home/roman/testws/src/components/webId.js"],"names":["ecCrypto","webSocketUrl","WebID","webSocket","WebSocket","setListeners","handshakeData","message","signature","handshakeCallback","getDataCallback","statusChangeCallback","cb","readyState","console","log","wsMessage","cmd","msg","send","JSON","stringify","data","validateMessage","then","catch","err","event","parse","onmessage","parseEventData","handshake","onclose","setTimeout","Promise","resolve","reject","publicKey","signedMessage","bufferedMessage","Buffer","from","verify"],"mappings":";;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,IAAMC,YAAY,GAAG,wCAArB;;IAEMC,K;;;AAEJ,mBAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,IAAIC,SAAJ,CAAcH,YAAd,CAAjB;AACA,SAAKI,YAAL;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACD;;;;0BAEKC,E,EAAI;AACR,UAAI,KAAKT,SAAL,CAAeU,UAAf,KAA8B,CAAlC,EAAqC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,YAAMC,SAAS,GAAG;AAAEC,UAAAA,GAAG,EAAE,WAAP;AAAoBC,UAAAA,GAAG,EAAE;AAAzB,SAAlB;AACA,aAAKf,SAAL,CAAegB,IAAf,CAAoBC,IAAI,CAACC,SAAL,mBAAmBL,SAAnB,EAApB;AACA,aAAKP,iBAAL,GAAyBG,EAAzB;AACD,OALD,MAKO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAH,QAAAA,EAAE,CAAC;AAAEM,UAAAA,GAAG,EAAE,kBAAP;AAA2BL,UAAAA,UAAU,EAAE,KAAKV,SAAL,CAAeU;AAAtD,SAAD,EAAqE,IAArE,EAA2E,IAA3E,CAAF;AACD;AACF;;;8BAE+O;AAAA,UAAxOS,IAAwO,uEAAjO,CAAC,QAAD,EAAU,UAAV,EAAqB,aAArB,EAAmC,gBAAnC,EAAoD,UAApD,EAA+D,gBAA/D,EAAgF,aAAhF,EAA8F,cAA9F,EAA6G,gBAA7G,EAA8H,IAA9H,EAAmI,SAAnI,EAA6I,WAA7I,EAAyJ,QAAzJ,EAAkK,UAAlK,EAA6K,OAA7K,EAAqL,SAArL,EAA+L,2BAA/L,CAAiO;AAAA,UAAJV,EAAI;;AAC9O,UAAI,KAAKT,SAAL,CAAeU,UAAf,KAA8B,CAAlC,EAAqC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACF,YAAMC,SAAS,GAAG;AAAEC,UAAAA,GAAG,EAAE,UAAP;AAAmBC,UAAAA,GAAG,EAAEI;AAAxB,SAAlB;AACA,aAAKnB,SAAL,CAAegB,IAAf,CAAoBC,IAAI,CAACC,SAAL,mBAAmBL,SAAnB,EAApB;AACA,aAAKN,eAAL,GAAuBE,EAAvB;AACC,OALD,MAKO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAH,QAAAA,EAAE,CAAC;AAAEM,UAAAA,GAAG,EAAE,kBAAP;AAA2BL,UAAAA,UAAU,EAAE,KAAKV,SAAL,CAAeU;AAAtD,SAAD,EAAqE,IAArE,EAA2E,IAA3E,CAAF;AACD;AACF;;;8BAESN,O,EAASC,S,EAAW;AAAA;;AAC5B,WAAKe,eAAL,CAAqBhB,OAArB,EAA8BC,SAA9B,EACKgB,IADL,CACU;AAAA,eAAM,KAAI,CAACf,iBAAL,IAA0B,KAAI,CAACA,iBAAL,CAAuB,IAAvB,EAA6BF,OAA7B,EAAsCC,SAAtC,CAAhC;AAAA,OADV,EAEKiB,KAFL,CAEW,UAACC,GAAD;AAAA,eAAS,KAAI,CAACjB,iBAAL,IAA0B,KAAI,CAACA,iBAAL,CAAuBiB,GAAvB,EAA4B,IAA5B,EAAkC,IAAlC,CAAnC;AAAA,OAFX;AAGD;;;yBAEInB,O,EAASC,S,EAAW;AAAA;;AACvB,WAAKe,eAAL,CAAqBhB,OAArB,EAA8BC,SAA9B,EACKgB,IADL,CACU;AAAA,eAAM,MAAI,CAACd,eAAL,IAAwB,MAAI,CAACA,eAAL,CAAqB,IAArB,EAA2BH,OAA3B,EAAoCC,SAApC,CAA9B;AAAA,OADV,EAEKiB,KAFL,CAEW,UAACC,GAAD;AAAA,eAAS,MAAI,CAAChB,eAAL,IAAwB,MAAI,CAACA,eAAL,CAAqBgB,GAArB,EAA0B,IAA1B,EAAgC,IAAhC,CAAjC;AAAA,OAFX;AAGD;;;yCAEoBd,E,EAAI;AACvB,WAAKD,oBAAL,GAA4BC,EAA5B;AACD;;;mCAEce,K,EAAO;AACpB,UAAML,IAAI,GAAGF,IAAI,CAACQ,KAAL,CAAWD,KAAK,CAACL,IAAjB,CAAb;AACA,aAAOA,IAAP;AACD;;;mCAEc;AAAA;;AACb,WAAKnB,SAAL,CAAe0B,SAAf,GAA2B,UAACF,KAAD,EAAW;AACpC,YAAML,IAAI,GAAG,MAAI,CAACQ,cAAL,CAAoBH,KAApB,CAAb;;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;;AACA,gBAAQA,IAAI,CAACL,GAAb;AACE,eAAK,WAAL;AACE,YAAA,MAAI,CAACc,SAAL,CAAeT,IAAI,CAACJ,GAApB,EAAyBI,IAAI,CAACd,SAA9B;;AACA;;AACF,eAAK,MAAL;AACE;AACA,YAAA,MAAI,CAACc,IAAL,CAAUA,IAAI,CAACJ,GAAf,EAAoBI,IAAI,CAACd,SAAzB;;AACA;;AACF,eAAK,qBAAL;AACE,YAAA,MAAI,CAACG,oBAAL,IAA6B,MAAI,CAACA,oBAAL,CAA0BW,IAAI,CAACJ,GAA/B,CAA7B;AACA;;AACF;AACEJ,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAZJ;AAcD,OAjBD;;AAkBA,WAAKZ,SAAL,CAAe6B,OAAf,GAAyB,UAACL,KAAD,EAAW;AAClCb,QAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAM,QAAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAAC9B,SAAL,GAAiB,IAAIC,SAAJ,CAAcH,YAAd,CAAjB;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OALD;AAMD;;;oCAEeM,O,EAASC,S,EAAW;AAClC,aAAO,IAAI0B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCtB,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,YAAMsB,SAAS,GAAG9B,OAAO,CAAC8B,SAA1B;AACA,YAAMC,aAAa,GAAGlB,IAAI,CAACC,SAAL,CAAed,OAAf,CAAtB;AACA,YAAMgC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2B,MAA3B,CAAxB;AACAtC,QAAAA,QAAQ,CAAC0C,MAAT,CAAgBL,SAAhB,EAA2BE,eAA3B,EAA4C/B,SAA5C,EACGgB,IADH,CACQ;AAAA,iBAAMW,OAAO,CAAC,IAAD,CAAb;AAAA,SADR,EAEGV,KAFH,CAES;AAAA,iBAAMW,MAAM,CAAC,KAAD,CAAZ;AAAA,SAFT;AAGD,OARM,CAAP;AASD;;;;;;AAIH,eAAelC,KAAf","sourcesContent":["import * as ecCrypto from 'eccrypto';\nconst webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg';\n\nclass WebID {\n\n  constructor() {\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeData = null;\n    this.message = null;\n    this.signature = null;\n    this.handshakeCallback = null;\n    this.getDataCallback = null;\n    this.statusChangeCallback = null;\n  }\n\n  login(cb) {\n    if (this.webSocket.readyState === 1) {\n      console.log('try to login');\n      const wsMessage = { cmd: 'handshake', msg: {} };\n      this.webSocket.send(JSON.stringify({...wsMessage}));\n      this.handshakeCallback = cb;\n    } else {\n      console.log('connection error');\n      cb({ msg: 'connection error', readyState: this.webSocket.readyState }, null, null);\n    }\n  }\n\n  getData(data = [\"cardID\",\"dokState\",\"DokTryLimit\",\"DokMaxTryLimit\",\"iokState\",\"IokMaxTryLimit\",\"IokTryLimit\",\"serialNumber\",\"documentNumber\",\"CN\",\"surName\",\"givenName\",\"street\",\"locality\",\"state\",\"country\",\"testWhichIsNotImplemented\"], cb) {\n    if (this.webSocket.readyState === 1) {\n      console.log('try to get data');\n    const wsMessage = { cmd: 'get-date', msg: data };\n    this.webSocket.send(JSON.stringify({...wsMessage}));\n    this.getDataCallback = cb;\n    } else {\n      console.log('connection error');\n      cb({ msg: 'connection error', readyState: this.webSocket.readyState }, null, null);\n    }\n  }\n\n  handshake(message, signature) {\n    this.validateMessage(message, signature)\n        .then(() => this.handshakeCallback && this.handshakeCallback(null, message, signature))\n        .catch((err) => this.handshakeCallback && this.handshakeCallback(err, null, null));\n  }\n\n  data(message, signature) {\n    this.validateMessage(message, signature)\n        .then(() => this.getDataCallback && this.getDataCallback(null, message, signature))\n        .catch((err) => this.getDataCallback && this.getDataCallback(err, null, null));\n  }\n\n  listenToStatusChange(cb) {\n    this.statusChangeCallback = cb;\n  }\n\n  parseEventData(event) {\n    const data = JSON.parse(event.data);\n    return data;\n  }\n\n  setListeners() {\n    this.webSocket.onmessage = (event) => {\n      const data = this.parseEventData(event);\n      console.log(data);\n      switch (data.cmd) {\n        case 'handshake':\n          this.handshake(data.msg, data.signature);\n          break;\n        case 'data':\n          // todo\n          this.data(data.msg, data.signature);\n          break;\n        case 'card-present-status':\n          this.statusChangeCallback && this.statusChangeCallback(data.msg);\n          break;\n        default:\n          console.log('unknown cmd');\n      }\n    }\n    this.webSocket.onclose = (event) => {\n      console.log(event);\n      setTimeout(() => {\n        this.webSocket = new WebSocket(webSocketUrl);\n      }, 5000);\n    };\n  }\n\n  validateMessage(message, signature) {\n    return new Promise((resolve, reject) => {\n      console.log('validation')\n      const publicKey = message.publicKey;\n      const signedMessage = JSON.stringify(message);\n      const bufferedMessage = Buffer.from(signedMessage, 'utf8');\n      ecCrypto.verify(publicKey, bufferedMessage, signature)\n        .then(() => resolve(true) )\n        .catch(() => reject(false) );\n    });\n  }\n\n}\n\nexport default WebID;"]},"metadata":{},"sourceType":"module"}