{"ast":null,"code":"import _classCallCheck from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/roman/testws/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as eccrypto from 'eccrypto'; // todo\n\nvar webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg'; // automatical request\n\nvar responseObject = {\n  cmd: 'handshake',\n  msg: {\n    birthNumber: '120493904239048',\n    documentNumber: '271498327498',\n    publicKey: '23oiroi2joi23jrio23j'\n  },\n  signature: '99r8329r8j2398fj93f2j983f2j'\n};\n\nvar WebID =\n/*#__PURE__*/\nfunction () {\n  function WebID() {\n    _classCallCheck(this, WebID);\n\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeCallback = null;\n    this.handshakeData = null;\n    this.message = null;\n    this.signature = null;\n  }\n\n  _createClass(WebID, [{\n    key: \"login\",\n    value: function login(cb) {\n      if (this.webSocket.readyState === 1) {\n        console.log('try to handshake');\n        this.handshakeCmd = true;\n        this.webSocket.send(JSON.stringify({\n          cmd: 'handshake',\n          msg: {}\n        }));\n        this.handshakeCallback = cb;\n      } else {\n        console.log('connection error');\n        cb({\n          msg: 'connection error',\n          readyState: this.webSocket.readyState\n        }, null, null);\n      }\n    }\n  }, {\n    key: \"handshake\",\n    value: function handshake(message, signature) {\n      var _this = this;\n\n      this.validateHandshake(message, signature).then(function () {\n        return _this.handshakeCallback(null, message, signature);\n      }).catch(function (err) {\n        return _this.handshakeCallback(err, null, null);\n      });\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(messaage, signature) {// todo\n    }\n  }, {\n    key: \"listenToStatusChange\",\n    value: function listenToStatusChange(cb) {\n      var _this2 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = _this2.parseEventData(event);\n\n        if (data.cmd === 'card-present-status') {\n          cb(data.msg);\n        }\n      };\n    }\n  }, {\n    key: \"parseEventData\",\n    value: function parseEventData(event) {\n      var data = JSON.parse(event.data);\n      console.log(data);\n      return data;\n    }\n  }, {\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this3 = this;\n\n      this.webSocket.onmessage = function (event) {\n        var data = _this3.parseEventData(event);\n\n        switch (data.cmd) {\n          case 'handshake':\n            _this3.handshake(data.msg, data.signature);\n\n            break;\n\n          case 'data':\n            _this3.getData(data.msg, data.signature);\n\n            break;\n\n          case 'card-present-status':\n            // implemented in other listener\n            break;\n\n          default:\n            console.log('unknown cmd');\n        }\n      };\n    }\n  }, {\n    key: \"validateHandshake\",\n    value: function validateHandshake(message, signature) {\n      return new Promise(function (resolve, reject) {\n        var publicKey = message.publicKey;\n        var signedMessage = JSON.stringify(message);\n        var bufferedMessage = Buffer.from(signedMessage, 'utf8');\n        eccrypto.verify(publicKey, bufferedMessage, signature).then(function () {\n          return resolve(true);\n        }).catch(function () {\n          return reject(false);\n        });\n      });\n    }\n  }]);\n\n  return WebID;\n}();\n\nexport default WebID;\n/*\nasync function login() {\n  try {\n    const data = await fetch(`${baseUrl}/login`);\n    await eccrypto.verify(data.publicKey, data.message, data.signature);\n    return Promise.resolve(data.message);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nfunction data() {\n  fetch(`${baseUrl}/data`).then((data) => {\n    eccrypto\n    console.log(data);\n  }).catch((err) => {\n    console.log(err);\n  });\n}\n\nlogin();\n\n*/","map":{"version":3,"sources":["/home/roman/testws/src/components/webId.js"],"names":["eccrypto","webSocketUrl","responseObject","cmd","msg","birthNumber","documentNumber","publicKey","signature","WebID","webSocket","WebSocket","setListeners","handshakeCallback","handshakeData","message","cb","readyState","console","log","handshakeCmd","send","JSON","stringify","validateHandshake","then","catch","err","messaage","onmessage","event","data","parseEventData","parse","handshake","getData","Promise","resolve","reject","signedMessage","bufferedMessage","Buffer","from","verify"],"mappings":"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","sourcesContent":["import * as eccrypto from 'eccrypto'; // todo\nconst webSocketUrl = 'ws://192.168.51.154:8080/websocket/msg';\n\n// automatical request\nconst responseObject = {\n  cmd: 'handshake',\n  msg: {\n    birthNumber: '120493904239048',\n    documentNumber: '271498327498',\n    publicKey: '23oiroi2joi23jrio23j'\n  },\n  signature: '99r8329r8j2398fj93f2j983f2j'\n}\n\nclass WebID {\n\n  constructor() {\n    this.webSocket = new WebSocket(webSocketUrl);\n    this.setListeners();\n    this.handshakeCallback = null;\n    this.handshakeData = null;\n    this.message = null;\n    this.signature = null;\n  }\n\n  login(cb) {\n    if (this.webSocket.readyState === 1) {\n      console.log('try to handshake');\n      this.handshakeCmd = true;\n      this.webSocket.send(JSON.stringify({ cmd: 'handshake', msg: {} }));\n      this.handshakeCallback = cb;\n    } else {\n      console.log('connection error');\n      cb({ msg: 'connection error', readyState: this.webSocket.readyState }, null, null);\n    }\n  }\n\n  handshake(message, signature) {\n    this.validateHandshake(message, signature)\n        .then(() => this.handshakeCallback(null, message, signature))\n        .catch((err) => this.handshakeCallback(err, null, null));\n  }\n\n  getData(messaage, signature) {\n    // todo\n  }\n\n  listenToStatusChange(cb){\n    this.webSocket.onmessage = (event) => {\n      const data = this.parseEventData(event);\n      if(data.cmd === 'card-present-status') {\n        cb(data.msg);\n      }\n    }\n  }\n\n  parseEventData(event) {\n    const data = JSON.parse(event.data);\n    console.log(data);\n    return data;\n  }\n\n  setListeners() {\n    this.webSocket.onmessage = (event) => {\n      const data = this.parseEventData(event);\n      switch (data.cmd) {\n        case 'handshake':\n          this.handshake(data.msg, data.signature);\n          break;\n        case 'data':\n          this.getData(data.msg, data.signature);\n          break;\n        case 'card-present-status':\n          // implemented in other listener\n          break;\n        default:\n          console.log('unknown cmd');\n      }\n    }\n  }\n\n  validateHandshake(message, signature) {\n    return new Promise((resolve, reject) => {\n      const publicKey = message.publicKey;\n      const signedMessage = JSON.stringify(message);\n      const bufferedMessage = Buffer.from(signedMessage, 'utf8');\n      eccrypto.verify(publicKey, bufferedMessage, signature).then(() => {\n        return resolve(true);\n      }).catch(() => {\n        return reject(false);\n      });\n    })\n  }\n\n}\n\nexport default WebID;\n\n/*\nasync function login() {\n  try {\n    const data = await fetch(`${baseUrl}/login`);\n    await eccrypto.verify(data.publicKey, data.message, data.signature);\n    return Promise.resolve(data.message);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nfunction data() {\n  fetch(`${baseUrl}/data`).then((data) => {\n    eccrypto\n    console.log(data);\n  }).catch((err) => {\n    console.log(err);\n  });\n}\n\nlogin();\n\n*/"]},"metadata":{},"sourceType":"module"}